/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MonitoringData as PrismaMonitoringData } from "@prisma/client";

export class MonitoringDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MonitoringDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.monitoringData.count(args);
  }

  async monitoringDataItems(
    args: Prisma.MonitoringDataFindManyArgs
  ): Promise<PrismaMonitoringData[]> {
    return this.prisma.monitoringData.findMany(args);
  }
  async monitoringData(
    args: Prisma.MonitoringDataFindUniqueArgs
  ): Promise<PrismaMonitoringData | null> {
    return this.prisma.monitoringData.findUnique(args);
  }
  async createMonitoringData(
    args: Prisma.MonitoringDataCreateArgs
  ): Promise<PrismaMonitoringData> {
    return this.prisma.monitoringData.create(args);
  }
  async updateMonitoringData(
    args: Prisma.MonitoringDataUpdateArgs
  ): Promise<PrismaMonitoringData> {
    return this.prisma.monitoringData.update(args);
  }
  async deleteMonitoringData(
    args: Prisma.MonitoringDataDeleteArgs
  ): Promise<PrismaMonitoringData> {
    return this.prisma.monitoringData.delete(args);
  }
}
