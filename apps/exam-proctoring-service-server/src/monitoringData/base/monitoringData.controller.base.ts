/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MonitoringDataService } from "../monitoringData.service";
import { MonitoringDataCreateInput } from "./MonitoringDataCreateInput";
import { MonitoringData } from "./MonitoringData";
import { MonitoringDataFindManyArgs } from "./MonitoringDataFindManyArgs";
import { MonitoringDataWhereUniqueInput } from "./MonitoringDataWhereUniqueInput";
import { MonitoringDataUpdateInput } from "./MonitoringDataUpdateInput";

export class MonitoringDataControllerBase {
  constructor(protected readonly service: MonitoringDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MonitoringData })
  async createMonitoringData(
    @common.Body() data: MonitoringDataCreateInput
  ): Promise<MonitoringData> {
    return await this.service.createMonitoringData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MonitoringData] })
  @ApiNestedQuery(MonitoringDataFindManyArgs)
  async monitoringDataItems(
    @common.Req() request: Request
  ): Promise<MonitoringData[]> {
    const args = plainToClass(MonitoringDataFindManyArgs, request.query);
    return this.service.monitoringDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MonitoringData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async monitoringData(
    @common.Param() params: MonitoringDataWhereUniqueInput
  ): Promise<MonitoringData | null> {
    const result = await this.service.monitoringData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MonitoringData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMonitoringData(
    @common.Param() params: MonitoringDataWhereUniqueInput,
    @common.Body() data: MonitoringDataUpdateInput
  ): Promise<MonitoringData | null> {
    try {
      return await this.service.updateMonitoringData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MonitoringData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMonitoringData(
    @common.Param() params: MonitoringDataWhereUniqueInput
  ): Promise<MonitoringData | null> {
    try {
      return await this.service.deleteMonitoringData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
