/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MonitoringData } from "./MonitoringData";
import { MonitoringDataCountArgs } from "./MonitoringDataCountArgs";
import { MonitoringDataFindManyArgs } from "./MonitoringDataFindManyArgs";
import { MonitoringDataFindUniqueArgs } from "./MonitoringDataFindUniqueArgs";
import { DeleteMonitoringDataArgs } from "./DeleteMonitoringDataArgs";
import { MonitoringDataService } from "../monitoringData.service";
@graphql.Resolver(() => MonitoringData)
export class MonitoringDataResolverBase {
  constructor(protected readonly service: MonitoringDataService) {}

  async _monitoringDataItemsMeta(
    @graphql.Args() args: MonitoringDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MonitoringData])
  async monitoringDataItems(
    @graphql.Args() args: MonitoringDataFindManyArgs
  ): Promise<MonitoringData[]> {
    return this.service.monitoringDataItems(args);
  }

  @graphql.Query(() => MonitoringData, { nullable: true })
  async monitoringData(
    @graphql.Args() args: MonitoringDataFindUniqueArgs
  ): Promise<MonitoringData | null> {
    const result = await this.service.monitoringData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MonitoringData)
  async deleteMonitoringData(
    @graphql.Args() args: DeleteMonitoringDataArgs
  ): Promise<MonitoringData | null> {
    try {
      return await this.service.deleteMonitoringData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
